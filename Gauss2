package forRandomOrder;

import java.awt.*;// we need this one for Components
import java.awt.event.*;//we need this one for ActionListener

import javax.swing.*;//we need this one for Components whose class name begins with a J




public class part2 extends JFrame{

  private Container myCP;
	private JTextArea outputTA;
	private JTextField[][] myTFs;
	private JScrollPane outputSP;
	private JButton go1B;
	private JButton doneB;
	private int myRows;
	private int myCols;


	private double [][] myArray;


	public part2(int rows, int cols){
		super("Gaussian Elimination With Partial Pivoting");
		setSize(600,600); 
		setLocation(100,100);
		myCP = getContentPane(); 
		myCP.setLayout(null);


		doneB = new JButton(" Exit ");
		doneB.setSize(100, 20);
		doneB.setLocation(140,270);
		doneB.setEnabled(true);
		myCP.add(doneB);
		doneB.addActionListener(new DoneBHandler());

		go1B = new JButton(" Go! ");
		go1B.setSize(100,20);
		go1B.setLocation(20,270);
		go1B.setEnabled(true);
		myCP.add(go1B);
		go1B.addActionListener(new Go1BHandler());

		outputTA = new JTextArea("");
		outputSP = new JScrollPane(outputTA, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, 
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		outputSP.setSize(550,250);
		outputSP.setBackground(Color.PINK);
		outputSP.setLocation(20,300);
		myCP.add(outputSP);


		myRows = rows;
		myCols = cols;

		myTFs = new JTextField[rows][cols];
		for(int i = 0; i < rows ; i++){
			for(int j = 0; j < cols; j++){
				myTFs[i][j] = new JTextField();
				myTFs[i][j].setLocation(50 * j+20, 30 * i+20);
				myTFs[i][j].setSize(40,20);
				myCP.add(myTFs[i][j]);
			}//for j
		}//for i
		myArray = new double[rows][cols];
		setVisible(true);
	}//***********************************constructor******************************//


	//**********************************showArray*********************************//
	private void showArray(String message){
		outputTA.append(message + "\n");
		for(int i = 0; i < myRows; i++){
			for(int j=0; j<myCols; j++){
				outputTA.append(myArray[i][j]+"\t");
			}//for j
			outputTA.append("\n");
		}//for i
	}//**********************************showArray*******************************//


	//**********************************swapRows*********************************//
	private void swapRows(int oneRow, int anotherRow){
		for(int j = 0; j < myCols; j++){
			double hold = myArray[oneRow][j];
			myArray[oneRow][j] = myArray[anotherRow][j];
			myArray[anotherRow][j] = hold;
		}//for j
	}//*********************************swapRows********************************//


	//****************************************subtractAcrossRow****************************************//
	private void subtractAcrossRow(int pivotRow, int pivotColumn, int theOtherRow){
		double multiplier = myArray[theOtherRow][pivotColumn]/myArray[pivotRow][pivotColumn];
		for(int j = 0; j< myCols; j++){
			myArray[theOtherRow][j]=myArray[theOtherRow][j] - multiplier * myArray[pivotRow][j];
			if (myArray[theOtherRow][j] < .0000000000001) {
				myArray[theOtherRow][j] = 0;
			}//if
		}// for j
	}//************************************subtractAcrossRow**************************************//


	//*****************************************DoneBHandler******************************************//
	public class DoneBHandler implements ActionListener {
		public void actionPerformed (ActionEvent e){
			System.exit(0);
		}
	}//***********************************DoneBHandler******************************************//


	//****************************************Go1BHandler******************************************//
	public class Go1BHandler implements ActionListener {
		public void actionPerformed (ActionEvent e){
			boolean goToNextColumn = false;
			int startI = 0;
			for(int i = 0; i < myRows ; i++){
				for(int j = 0; j < myCols; j++){
					String userInput = myTFs[i][j].getText();
					myArray[i][j] = Double.parseDouble(userInput);
					outputTA.append(myArray[i][j] + "\t ");
				}//for j
				outputTA.append("\n");
			}// for i
			double largestFirstCol = Math.abs(myArray[0][0]);
			int rowOfLargest = 0;
			for(int i = 1; i<myRows; i++){
				if(Math.abs(myArray[i][0])>largestFirstCol){
					largestFirstCol = Math.abs(myArray[i][0]);
					rowOfLargest = i;
				}//if
			}//for




			//			System.out.println("largest absolute value in the first column is " + largestFirstCol);
			//			System.out.println("it is in row " + rowOfLargest);
			//			swapRows(0, rowOfLargest);
			//			outputTA.append("After swapping largest of first column\n");

			for(int j =0; j < myCols; j++){
				double largest = Math.abs(myArray[j][j]);
				if(!goToNextColumn){
					rowOfLargest = j;
					startI = j+1;
				} else {
					rowOfLargest = j-1;
					startI = j;
				}//else
				for(int i = startI; i < myRows; i++){
					if((Math.abs(myArray[i][j]) > largest)){
						largest = Math.abs(myArray[i][j]);
						rowOfLargest = i;
					}//if
				}//for

				if(largest > 0.0000000000000000000000000000001){
					outputTA.append("Largest in column " + (j+1)  + " is " + largest + "\n" );
					outputTA.append("It is in row " + (rowOfLargest+1) + "\n");
					//showArray("Before swapping of rows \n");
					swapRows(startI - 1, rowOfLargest);
					showArray("After swap \n");
					for(int i = startI; i < myRows; i++){
						subtractAcrossRow(startI - 1,j,i);
						showArray("");
					}// for i
				}else { //largest is zero
					goToNextColumn = true;
				}
			}// for j
		}//actionPerformed
	}//***************************************Go1BHandler**********************************************//


}//	part2


